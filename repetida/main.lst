CCS PCH C Compiler, Version 5.009, 5967               09-sep.-19 13:44

               Filename:   C:\Users\Carlos Valencia\Desktop\Calculadora\main.lst

               ROM used:   4446 bytes (14%)
                           Largest free fragment is 28322
               RAM used:   25 (1%) at main() level
                           47 (2%) worst case
               Stack used: 5 locations
               Stack size: 31

*
0000:  GOTO   0A68
.................... /* 
.................... Este Programa 
....................  
.................... */ 
.................... #include <18F4550.H> // Selecciona el Microcontrolador 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 28,0C
0016:  DATA 01,06
*
01FE:  MOVF   22,W
0200:  BTFSC  FD8.2
0202:  BRA    02E6
0204:  MOVWF  00
0206:  MOVF   26,W
0208:  BTFSC  FD8.2
020A:  BRA    02E6
020C:  ADDWF  00,F
020E:  BNC   0218
0210:  MOVLW  81
0212:  ADDWF  00,F
0214:  BC    02E6
0216:  BRA    0220
0218:  MOVLW  7F
021A:  SUBWF  00,F
021C:  BNC   02E6
021E:  BZ    02E6
0220:  MOVFF  23,2A
0224:  MOVF   27,W
0226:  XORWF  2A,F
0228:  BSF    23.7
022A:  BSF    27.7
022C:  MOVF   25,W
022E:  MULWF  29
0230:  MOVFF  FF4,2C
0234:  MOVF   24,W
0236:  MULWF  28
0238:  MOVFF  FF4,03
023C:  MOVFF  FF3,2B
0240:  MULWF  29
0242:  MOVF   FF3,W
0244:  ADDWF  2C,F
0246:  MOVF   FF4,W
0248:  ADDWFC 2B,F
024A:  MOVLW  00
024C:  ADDWFC 03,F
024E:  MOVF   25,W
0250:  MULWF  28
0252:  MOVF   FF3,W
0254:  ADDWF  2C,F
0256:  MOVF   FF4,W
0258:  ADDWFC 2B,F
025A:  MOVLW  00
025C:  CLRF   02
025E:  ADDWFC 03,F
0260:  ADDWFC 02,F
0262:  MOVF   23,W
0264:  MULWF  29
0266:  MOVF   FF3,W
0268:  ADDWF  2B,F
026A:  MOVF   FF4,W
026C:  ADDWFC 03,F
026E:  MOVLW  00
0270:  ADDWFC 02,F
0272:  MOVF   23,W
0274:  MULWF  28
0276:  MOVF   FF3,W
0278:  ADDWF  03,F
027A:  MOVF   FF4,W
027C:  ADDWFC 02,F
027E:  MOVLW  00
0280:  CLRF   01
0282:  ADDWFC 01,F
0284:  MOVF   25,W
0286:  MULWF  27
0288:  MOVF   FF3,W
028A:  ADDWF  2B,F
028C:  MOVF   FF4,W
028E:  ADDWFC 03,F
0290:  MOVLW  00
0292:  ADDWFC 02,F
0294:  ADDWFC 01,F
0296:  MOVF   24,W
0298:  MULWF  27
029A:  MOVF   FF3,W
029C:  ADDWF  03,F
029E:  MOVF   FF4,W
02A0:  ADDWFC 02,F
02A2:  MOVLW  00
02A4:  ADDWFC 01,F
02A6:  MOVF   23,W
02A8:  MULWF  27
02AA:  MOVF   FF3,W
02AC:  ADDWF  02,F
02AE:  MOVF   FF4,W
02B0:  ADDWFC 01,F
02B2:  INCF   00,F
02B4:  BTFSC  01.7
02B6:  BRA    02C2
02B8:  RLCF   2B,F
02BA:  RLCF   03,F
02BC:  RLCF   02,F
02BE:  RLCF   01,F
02C0:  DECF   00,F
02C2:  MOVLW  00
02C4:  BTFSS  2B.7
02C6:  BRA    02DC
02C8:  INCF   03,F
02CA:  ADDWFC 02,F
02CC:  ADDWFC 01,F
02CE:  MOVF   01,W
02D0:  BNZ   02DC
02D2:  MOVF   02,W
02D4:  BNZ   02DC
02D6:  MOVF   03,W
02D8:  BNZ   02DC
02DA:  INCF   00,F
02DC:  BTFSC  2A.7
02DE:  BSF    01.7
02E0:  BTFSS  2A.7
02E2:  BCF    01.7
02E4:  BRA    02EE
02E6:  CLRF   00
02E8:  CLRF   01
02EA:  CLRF   02
02EC:  CLRF   03
02EE:  RETURN 0
02F0:  MOVLW  8E
02F2:  MOVWF  00
02F4:  MOVFF  1A,01
02F8:  MOVFF  19,02
02FC:  CLRF   03
02FE:  MOVF   01,F
0300:  BNZ   0314
0302:  MOVFF  02,01
0306:  CLRF   02
0308:  MOVLW  08
030A:  SUBWF  00,F
030C:  MOVF   01,F
030E:  BNZ   0314
0310:  CLRF   00
0312:  BRA    0324
0314:  BCF    FD8.0
0316:  BTFSC  01.7
0318:  BRA    0322
031A:  RLCF   02,F
031C:  RLCF   01,F
031E:  DECF   00,F
0320:  BRA    0314
0322:  BCF    01.7
0324:  RETURN 0
0326:  MOVLW  80
0328:  BTFSC  FD8.1
032A:  XORWF  1E,F
032C:  CLRF   23
032E:  CLRF   24
0330:  MOVFF  1A,22
0334:  MOVF   1E,W
0336:  XORWF  22,F
0338:  MOVF   19,W
033A:  BTFSC  FD8.2
033C:  BRA    04F6
033E:  MOVWF  21
0340:  MOVWF  00
0342:  MOVF   1D,W
0344:  BTFSC  FD8.2
0346:  BRA    0508
0348:  SUBWF  21,F
034A:  BTFSC  FD8.2
034C:  BRA    0450
034E:  BNC   03CA
0350:  MOVFF  1E,27
0354:  BSF    27.7
0356:  MOVFF  1F,26
035A:  MOVFF  20,25
035E:  CLRF   24
0360:  BCF    FD8.0
0362:  RRCF   27,F
0364:  RRCF   26,F
0366:  RRCF   25,F
0368:  RRCF   24,F
036A:  DECFSZ 21,F
036C:  BRA    035E
036E:  BTFSS  22.7
0370:  BRA    0378
0372:  BSF    23.0
0374:  BRA    0530
0376:  BCF    23.0
0378:  BCF    21.0
037A:  BSF    23.4
037C:  CLRF   FEA
037E:  MOVLW  1C
0380:  MOVWF  FE9
0382:  BRA    0556
0384:  BCF    23.4
0386:  BTFSC  22.7
0388:  BRA    039E
038A:  BTFSS  21.0
038C:  BRA    03B4
038E:  RRCF   27,F
0390:  RRCF   26,F
0392:  RRCF   25,F
0394:  RRCF   24,F
0396:  INCF   00,F
0398:  BTFSC  FD8.2
039A:  BRA    0526
039C:  BRA    03B4
039E:  BTFSC  27.7
03A0:  BRA    03BA
03A2:  BCF    FD8.0
03A4:  RLCF   24,F
03A6:  RLCF   25,F
03A8:  RLCF   26,F
03AA:  RLCF   27,F
03AC:  DECF   00,F
03AE:  BTFSC  FD8.2
03B0:  BRA    0526
03B2:  BRA    039E
03B4:  BSF    23.6
03B6:  BRA    048E
03B8:  BCF    23.6
03BA:  MOVFF  1A,22
03BE:  BTFSS  1A.7
03C0:  BRA    03C6
03C2:  BSF    27.7
03C4:  BRA    0518
03C6:  BCF    27.7
03C8:  BRA    0518
03CA:  MOVFF  1D,21
03CE:  MOVFF  1D,00
03D2:  MOVF   19,W
03D4:  SUBWF  21,F
03D6:  MOVFF  1A,27
03DA:  BSF    27.7
03DC:  MOVFF  1B,26
03E0:  MOVFF  1C,25
03E4:  CLRF   24
03E6:  BCF    FD8.0
03E8:  RRCF   27,F
03EA:  RRCF   26,F
03EC:  RRCF   25,F
03EE:  RRCF   24,F
03F0:  DECFSZ 21,F
03F2:  BRA    03E4
03F4:  BTFSS  22.7
03F6:  BRA    03FE
03F8:  BSF    23.1
03FA:  BRA    0530
03FC:  BCF    23.1
03FE:  BCF    21.0
0400:  BSF    23.5
0402:  CLRF   FEA
0404:  MOVLW  20
0406:  MOVWF  FE9
0408:  BRA    0556
040A:  BCF    23.5
040C:  BTFSC  22.7
040E:  BRA    0424
0410:  BTFSS  21.0
0412:  BRA    043A
0414:  RRCF   27,F
0416:  RRCF   26,F
0418:  RRCF   25,F
041A:  RRCF   24,F
041C:  INCF   00,F
041E:  BTFSC  FD8.2
0420:  BRA    0526
0422:  BRA    043A
0424:  BTFSC  27.7
0426:  BRA    0440
0428:  BCF    FD8.0
042A:  RLCF   24,F
042C:  RLCF   25,F
042E:  RLCF   26,F
0430:  RLCF   27,F
0432:  DECF   00,F
0434:  BTFSC  FD8.2
0436:  BRA    0526
0438:  BRA    0424
043A:  BSF    23.7
043C:  BRA    048E
043E:  BCF    23.7
0440:  MOVFF  1E,22
0444:  BTFSS  1E.7
0446:  BRA    044C
0448:  BSF    27.7
044A:  BRA    0518
044C:  BCF    27.7
044E:  BRA    0518
0450:  MOVFF  1E,27
0454:  BSF    27.7
0456:  MOVFF  1F,26
045A:  MOVFF  20,25
045E:  BTFSS  22.7
0460:  BRA    046A
0462:  BCF    27.7
0464:  BSF    23.2
0466:  BRA    0530
0468:  BCF    23.2
046A:  CLRF   24
046C:  BCF    21.0
046E:  CLRF   FEA
0470:  MOVLW  1C
0472:  MOVWF  FE9
0474:  BRA    0556
0476:  BTFSC  22.7
0478:  BRA    04B2
047A:  MOVFF  1A,22
047E:  BTFSS  21.0
0480:  BRA    048E
0482:  RRCF   27,F
0484:  RRCF   26,F
0486:  RRCF   25,F
0488:  RRCF   24,F
048A:  INCF   00,F
048C:  BZ    0526
048E:  BTFSS  24.7
0490:  BRA    04A8
0492:  INCF   25,F
0494:  BNZ   04A8
0496:  INCF   26,F
0498:  BNZ   04A8
049A:  INCF   27,F
049C:  BNZ   04A8
049E:  RRCF   27,F
04A0:  RRCF   26,F
04A2:  RRCF   25,F
04A4:  INCF   00,F
04A6:  BZ    0526
04A8:  BTFSC  23.6
04AA:  BRA    03B8
04AC:  BTFSC  23.7
04AE:  BRA    043E
04B0:  BRA    04EA
04B2:  MOVLW  80
04B4:  XORWF  27,F
04B6:  BTFSS  27.7
04B8:  BRA    04C2
04BA:  BRA    0530
04BC:  MOVFF  1E,22
04C0:  BRA    04D6
04C2:  MOVFF  1A,22
04C6:  MOVF   27,F
04C8:  BNZ   04D6
04CA:  MOVF   26,F
04CC:  BNZ   04D6
04CE:  MOVF   25,F
04D0:  BNZ   04D6
04D2:  CLRF   00
04D4:  BRA    0518
04D6:  BTFSC  27.7
04D8:  BRA    04EA
04DA:  BCF    FD8.0
04DC:  RLCF   24,F
04DE:  RLCF   25,F
04E0:  RLCF   26,F
04E2:  RLCF   27,F
04E4:  DECFSZ 00,F
04E6:  BRA    04D6
04E8:  BRA    0526
04EA:  BTFSS  22.7
04EC:  BRA    04F2
04EE:  BSF    27.7
04F0:  BRA    0518
04F2:  BCF    27.7
04F4:  BRA    0518
04F6:  MOVFF  1D,00
04FA:  MOVFF  1E,27
04FE:  MOVFF  1F,26
0502:  MOVFF  20,25
0506:  BRA    0518
0508:  MOVFF  19,00
050C:  MOVFF  1A,27
0510:  MOVFF  1B,26
0514:  MOVFF  1C,25
0518:  MOVFF  27,01
051C:  MOVFF  26,02
0520:  MOVFF  25,03
0524:  BRA    058E
0526:  CLRF   00
0528:  CLRF   01
052A:  CLRF   02
052C:  CLRF   03
052E:  BRA    058E
0530:  CLRF   24
0532:  COMF   25,F
0534:  COMF   26,F
0536:  COMF   27,F
0538:  COMF   24,F
053A:  INCF   24,F
053C:  BNZ   0548
053E:  INCF   25,F
0540:  BNZ   0548
0542:  INCF   26,F
0544:  BNZ   0548
0546:  INCF   27,F
0548:  BTFSC  23.0
054A:  BRA    0376
054C:  BTFSC  23.1
054E:  BRA    03FC
0550:  BTFSC  23.2
0552:  BRA    0468
0554:  BRA    04BC
0556:  MOVF   FEF,W
0558:  ADDWF  25,F
055A:  BNC   0566
055C:  INCF   26,F
055E:  BNZ   0566
0560:  INCF   27,F
0562:  BTFSC  FD8.2
0564:  BSF    21.0
0566:  MOVF   FED,F
0568:  MOVF   FEF,W
056A:  ADDWF  26,F
056C:  BNC   0574
056E:  INCF   27,F
0570:  BTFSC  FD8.2
0572:  BSF    21.0
0574:  MOVF   FED,F
0576:  MOVF   FEF,W
0578:  BTFSC  FEF.7
057A:  BRA    057E
057C:  XORLW  80
057E:  ADDWF  27,F
0580:  BTFSC  FD8.0
0582:  BSF    21.0
0584:  BTFSC  23.4
0586:  BRA    0384
0588:  BTFSC  23.5
058A:  BRA    040A
058C:  BRA    0476
058E:  RETURN 0
*
05B2:  MOVF   1C,W
05B4:  CLRF   01
05B6:  SUBWF  1B,W
05B8:  BC    05C0
05BA:  MOVFF  1B,00
05BE:  BRA    05D8
05C0:  CLRF   00
05C2:  MOVLW  08
05C4:  MOVWF  1D
05C6:  RLCF   1B,F
05C8:  RLCF   00,F
05CA:  MOVF   1C,W
05CC:  SUBWF  00,W
05CE:  BTFSC  FD8.0
05D0:  MOVWF  00
05D2:  RLCF   01,F
05D4:  DECFSZ 1D,F
05D6:  BRA    05C6
05D8:  RETURN 0
*
061C:  MOVLW  20
061E:  BTFSS  16.4
0620:  MOVLW  30
0622:  MOVWF  17
0624:  MOVFF  15,00
0628:  BTFSS  15.7
062A:  BRA    063C
062C:  COMF   00,F
062E:  INCF   00,F
0630:  MOVFF  00,15
0634:  MOVLW  2D
0636:  MOVWF  17
0638:  BSF    16.7
063A:  BSF    16.0
063C:  MOVF   01,W
063E:  MOVFF  15,1B
0642:  MOVLW  64
0644:  MOVWF  1C
0646:  RCALL  05B2
0648:  MOVFF  00,15
064C:  MOVLW  30
064E:  ADDWF  01,W
0650:  MOVWF  18
0652:  MOVFF  15,1B
0656:  MOVLW  0A
0658:  MOVWF  1C
065A:  RCALL  05B2
065C:  MOVLW  30
065E:  ADDWF  00,W
0660:  MOVWF  1A
0662:  MOVLW  30
0664:  ADDWF  01,W
0666:  MOVWF  19
0668:  MOVFF  17,00
066C:  MOVLW  30
066E:  SUBWF  18,W
0670:  BZ    067A
0672:  BSF    16.1
0674:  BTFSC  16.7
0676:  BSF    16.2
0678:  BRA    069E
067A:  MOVFF  17,18
067E:  MOVLW  20
0680:  MOVWF  17
0682:  MOVLW  30
0684:  SUBWF  19,W
0686:  BZ    0690
0688:  BSF    16.0
068A:  BTFSC  16.7
068C:  BSF    16.1
068E:  BRA    069E
0690:  BTFSS  FD8.2
0692:  BSF    16.0
0694:  BNZ   069E
0696:  MOVFF  18,19
069A:  MOVLW  20
069C:  MOVWF  18
069E:  BTFSC  16.2
06A0:  BRA    06AC
06A2:  BTFSC  16.1
06A4:  BRA    06B2
06A6:  BTFSC  16.0
06A8:  BRA    06B8
06AA:  BRA    06BE
06AC:  MOVFF  17,22
06B0:  RCALL  05DA
06B2:  MOVFF  18,22
06B6:  RCALL  05DA
06B8:  MOVFF  19,22
06BC:  RCALL  05DA
06BE:  MOVFF  1A,22
06C2:  RCALL  05DA
06C4:  RETURN 0
06C6:  MOVF   22,W
06C8:  SUBLW  B6
06CA:  MOVWF  22
06CC:  CLRF   03
06CE:  MOVFF  23,26
06D2:  BSF    23.7
06D4:  BCF    FD8.0
06D6:  RRCF   23,F
06D8:  RRCF   24,F
06DA:  RRCF   25,F
06DC:  RRCF   03,F
06DE:  RRCF   02,F
06E0:  RRCF   01,F
06E2:  RRCF   00,F
06E4:  DECFSZ 22,F
06E6:  BRA    06D4
06E8:  BTFSS  26.7
06EA:  BRA    0702
06EC:  COMF   00,F
06EE:  COMF   01,F
06F0:  COMF   02,F
06F2:  COMF   03,F
06F4:  INCF   00,F
06F6:  BTFSC  FD8.2
06F8:  INCF   01,F
06FA:  BTFSC  FD8.2
06FC:  INCF   02,F
06FE:  BTFSC  FD8.2
0700:  INCF   03,F
0702:  GOTO   07E2 (RETURN)
0706:  BTFSC  FD8.1
0708:  BRA    0710
070A:  CLRF   FEA
070C:  MOVLW  2A
070E:  MOVWF  FE9
0710:  CLRF   00
0712:  CLRF   01
0714:  CLRF   02
0716:  CLRF   03
0718:  CLRF   2A
071A:  CLRF   2B
071C:  CLRF   2C
071E:  CLRF   2D
0720:  MOVF   29,W
0722:  IORWF  28,W
0724:  IORWF  27,W
0726:  IORWF  26,W
0728:  BZ    0782
072A:  MOVLW  20
072C:  MOVWF  2E
072E:  BCF    FD8.0
0730:  RLCF   22,F
0732:  RLCF   23,F
0734:  RLCF   24,F
0736:  RLCF   25,F
0738:  RLCF   2A,F
073A:  RLCF   2B,F
073C:  RLCF   2C,F
073E:  RLCF   2D,F
0740:  MOVF   29,W
0742:  SUBWF  2D,W
0744:  BNZ   0756
0746:  MOVF   28,W
0748:  SUBWF  2C,W
074A:  BNZ   0756
074C:  MOVF   27,W
074E:  SUBWF  2B,W
0750:  BNZ   0756
0752:  MOVF   26,W
0754:  SUBWF  2A,W
0756:  BNC   0776
0758:  MOVF   26,W
075A:  SUBWF  2A,F
075C:  MOVF   27,W
075E:  BTFSS  FD8.0
0760:  INCFSZ 27,W
0762:  SUBWF  2B,F
0764:  MOVF   28,W
0766:  BTFSS  FD8.0
0768:  INCFSZ 28,W
076A:  SUBWF  2C,F
076C:  MOVF   29,W
076E:  BTFSS  FD8.0
0770:  INCFSZ 29,W
0772:  SUBWF  2D,F
0774:  BSF    FD8.0
0776:  RLCF   00,F
0778:  RLCF   01,F
077A:  RLCF   02,F
077C:  RLCF   03,F
077E:  DECFSZ 2E,F
0780:  BRA    072E
0782:  MOVFF  2A,FEF
0786:  MOVFF  2B,FEC
078A:  MOVFF  2C,FEC
078E:  MOVFF  2D,FEC
0792:  RETURN 0
0794:  MOVF   FE9,W
0796:  MOVWF  1A
0798:  MOVF   19,W
079A:  MOVWF  1C
079C:  BZ    07D0
079E:  MOVFF  18,25
07A2:  MOVFF  17,24
07A6:  MOVFF  16,23
07AA:  MOVFF  15,22
07AE:  CLRF   29
07B0:  CLRF   28
07B2:  MOVLW  20
07B4:  MOVWF  27
07B6:  MOVLW  82
07B8:  MOVWF  26
07BA:  RCALL  01FE
07BC:  MOVFF  03,18
07C0:  MOVFF  02,17
07C4:  MOVFF  01,16
07C8:  MOVFF  00,15
07CC:  DECFSZ 1C,F
07CE:  BRA    079E
07D0:  MOVFF  18,25
07D4:  MOVFF  17,24
07D8:  MOVFF  16,23
07DC:  MOVFF  15,22
07E0:  BRA    06C6
07E2:  MOVFF  03,18
07E6:  MOVFF  02,17
07EA:  MOVFF  01,16
07EE:  MOVFF  00,15
07F2:  BTFSS  18.7
07F4:  BRA    0810
07F6:  DECF   1A,F
07F8:  BSF    1A.5
07FA:  COMF   15,F
07FC:  COMF   16,F
07FE:  COMF   17,F
0800:  COMF   18,F
0802:  INCF   15,F
0804:  BTFSC  FD8.2
0806:  INCF   16,F
0808:  BTFSC  FD8.2
080A:  INCF   17,F
080C:  BTFSC  FD8.2
080E:  INCF   18,F
0810:  MOVLW  3B
0812:  MOVWF  21
0814:  MOVLW  9A
0816:  MOVWF  20
0818:  MOVLW  CA
081A:  MOVWF  1F
081C:  CLRF   1E
081E:  MOVLW  0A
0820:  MOVWF  1C
0822:  MOVF   19,W
0824:  BTFSC  FD8.2
0826:  INCF   1A,F
0828:  BSF    FD8.1
082A:  CLRF   FEA
082C:  MOVLW  15
082E:  MOVWF  FE9
0830:  MOVFF  18,25
0834:  MOVFF  17,24
0838:  MOVFF  16,23
083C:  MOVFF  15,22
0840:  MOVFF  21,29
0844:  MOVFF  20,28
0848:  MOVFF  1F,27
084C:  MOVFF  1E,26
0850:  RCALL  0706
0852:  MOVF   01,W
0854:  MOVF   00,F
0856:  BNZ   0876
0858:  INCF   19,W
085A:  SUBWF  1C,W
085C:  BZ    0876
085E:  MOVF   1A,W
0860:  BZ    087A
0862:  ANDLW  0F
0864:  SUBWF  1C,W
0866:  BZ    086A
0868:  BC    08D8
086A:  BTFSC  1A.7
086C:  BRA    08D8
086E:  BTFSC  1A.6
0870:  BRA    087A
0872:  MOVLW  20
0874:  BRA    08D0
0876:  MOVLW  20
0878:  ANDWF  1A,F
087A:  BTFSS  1A.5
087C:  BRA    0896
087E:  BCF    1A.5
0880:  MOVF   19,W
0882:  BTFSS  FD8.2
0884:  DECF   1A,F
0886:  MOVF   00,W
0888:  MOVWF  1A
088A:  MOVLW  2D
088C:  MOVWF  22
088E:  RCALL  05DA
0890:  MOVF   1A,W
0892:  MOVWF  00
0894:  CLRF   1A
0896:  MOVF   19,W
0898:  SUBWF  1C,W
089A:  BNZ   08B0
089C:  MOVF   00,W
089E:  MOVWF  1A
08A0:  MOVLW  2E
08A2:  MOVWF  22
08A4:  RCALL  05DA
08A6:  MOVF   1A,W
08A8:  MOVWF  00
08AA:  MOVLW  20
08AC:  ANDWF  1A,F
08AE:  MOVLW  00
08B0:  MOVLW  30
08B2:  BTFSS  1A.5
08B4:  BRA    08D0
08B6:  BCF    1A.5
08B8:  MOVF   19,W
08BA:  BTFSS  FD8.2
08BC:  DECF   1A,F
08BE:  MOVF   00,W
08C0:  MOVWF  1A
08C2:  MOVLW  2D
08C4:  MOVWF  22
08C6:  RCALL  05DA
08C8:  MOVF   1A,W
08CA:  MOVWF  00
08CC:  CLRF   1A
08CE:  MOVLW  30
08D0:  ADDWF  00,F
08D2:  MOVFF  00,22
08D6:  RCALL  05DA
08D8:  BCF    FD8.1
08DA:  MOVFF  21,25
08DE:  MOVFF  20,24
08E2:  MOVFF  1F,23
08E6:  MOVFF  1E,22
08EA:  CLRF   29
08EC:  CLRF   28
08EE:  CLRF   27
08F0:  MOVLW  0A
08F2:  MOVWF  26
08F4:  RCALL  0706
08F6:  MOVFF  03,21
08FA:  MOVFF  02,20
08FE:  MOVFF  01,1F
0902:  MOVFF  00,1E
0906:  DECFSZ 1C,F
0908:  BRA    0828
090A:  RETURN 0
090C:  MOVF   15,W
090E:  BTFSC  FD8.2
0910:  BRA    0A5C
0912:  MOVWF  21
0914:  MOVF   19,W
0916:  BTFSC  FD8.2
0918:  BRA    0A5C
091A:  SUBWF  21,F
091C:  BNC   0928
091E:  MOVLW  7F
0920:  ADDWF  21,F
0922:  BTFSC  FD8.0
0924:  BRA    0A5C
0926:  BRA    0934
0928:  MOVLW  81
092A:  SUBWF  21,F
092C:  BTFSS  FD8.0
092E:  BRA    0A5C
0930:  BTFSC  FD8.2
0932:  BRA    0A5C
0934:  MOVFF  21,00
0938:  CLRF   01
093A:  CLRF   02
093C:  CLRF   03
093E:  CLRF   20
0940:  MOVFF  16,1F
0944:  BSF    1F.7
0946:  MOVFF  17,1E
094A:  MOVFF  18,1D
094E:  MOVLW  19
0950:  MOVWF  21
0952:  MOVF   1C,W
0954:  SUBWF  1D,F
0956:  BC    0972
0958:  MOVLW  01
095A:  SUBWF  1E,F
095C:  BC    0972
095E:  SUBWF  1F,F
0960:  BC    0972
0962:  SUBWF  20,F
0964:  BC    0972
0966:  INCF   20,F
0968:  INCF   1F,F
096A:  INCF   1E,F
096C:  MOVF   1C,W
096E:  ADDWF  1D,F
0970:  BRA    09C2
0972:  MOVF   1B,W
0974:  SUBWF  1E,F
0976:  BC    099C
0978:  MOVLW  01
097A:  SUBWF  1F,F
097C:  BC    099C
097E:  SUBWF  20,F
0980:  BC    099C
0982:  INCF   20,F
0984:  INCF   1F,F
0986:  MOVF   1B,W
0988:  ADDWF  1E,F
098A:  MOVF   1C,W
098C:  ADDWF  1D,F
098E:  BNC   09C2
0990:  INCF   1E,F
0992:  BNZ   09C2
0994:  INCF   1F,F
0996:  BNZ   09C2
0998:  INCF   20,F
099A:  BRA    09C2
099C:  MOVF   1A,W
099E:  IORLW  80
09A0:  SUBWF  1F,F
09A2:  BC    09C0
09A4:  MOVLW  01
09A6:  SUBWF  20,F
09A8:  BC    09C0
09AA:  INCF   20,F
09AC:  MOVF   1A,W
09AE:  IORLW  80
09B0:  ADDWF  1F,F
09B2:  MOVF   1B,W
09B4:  ADDWF  1E,F
09B6:  BNC   098A
09B8:  INCF   1F,F
09BA:  BNZ   098A
09BC:  INCF   20,F
09BE:  BRA    098A
09C0:  BSF    03.0
09C2:  DECFSZ 21,F
09C4:  BRA    09C8
09C6:  BRA    09DE
09C8:  BCF    FD8.0
09CA:  RLCF   1D,F
09CC:  RLCF   1E,F
09CE:  RLCF   1F,F
09D0:  RLCF   20,F
09D2:  BCF    FD8.0
09D4:  RLCF   03,F
09D6:  RLCF   02,F
09D8:  RLCF   01,F
09DA:  RLCF   22,F
09DC:  BRA    0952
09DE:  BTFSS  22.0
09E0:  BRA    09EE
09E2:  BCF    FD8.0
09E4:  RRCF   01,F
09E6:  RRCF   02,F
09E8:  RRCF   03,F
09EA:  RRCF   22,F
09EC:  BRA    09F2
09EE:  DECF   00,F
09F0:  BZ    0A5C
09F2:  BTFSC  22.7
09F4:  BRA    0A32
09F6:  BCF    FD8.0
09F8:  RLCF   1D,F
09FA:  RLCF   1E,F
09FC:  RLCF   1F,F
09FE:  RLCF   20,F
0A00:  MOVF   1C,W
0A02:  SUBWF  1D,F
0A04:  BC    0A14
0A06:  MOVLW  01
0A08:  SUBWF  1E,F
0A0A:  BC    0A14
0A0C:  SUBWF  1F,F
0A0E:  BC    0A14
0A10:  SUBWF  20,F
0A12:  BNC   0A48
0A14:  MOVF   1B,W
0A16:  SUBWF  1E,F
0A18:  BC    0A24
0A1A:  MOVLW  01
0A1C:  SUBWF  1F,F
0A1E:  BC    0A24
0A20:  SUBWF  20,F
0A22:  BNC   0A48
0A24:  MOVF   1A,W
0A26:  IORLW  80
0A28:  SUBWF  1F,F
0A2A:  BC    0A32
0A2C:  MOVLW  01
0A2E:  SUBWF  20,F
0A30:  BNC   0A48
0A32:  INCF   03,F
0A34:  BNZ   0A48
0A36:  INCF   02,F
0A38:  BNZ   0A48
0A3A:  INCF   01,F
0A3C:  BNZ   0A48
0A3E:  INCF   00,F
0A40:  BZ    0A5C
0A42:  RRCF   01,F
0A44:  RRCF   02,F
0A46:  RRCF   03,F
0A48:  MOVFF  16,21
0A4C:  MOVF   1A,W
0A4E:  XORWF  21,F
0A50:  BTFSS  21.7
0A52:  BRA    0A58
0A54:  BSF    01.7
0A56:  BRA    0A64
0A58:  BCF    01.7
0A5A:  BRA    0A64
0A5C:  CLRF   00
0A5E:  CLRF   01
0A60:  CLRF   02
0A62:  CLRF   03
0A64:  GOTO   10EA (RETURN)
....................  
.................... #list 
....................  
.................... #use delay(clock= 4Mhz) 
*
0018:  CLRF   FEA
001A:  MOVLW  23
001C:  MOVWF  FE9
001E:  MOVF   FEF,W
0020:  BZ    003E
0022:  MOVLW  01
0024:  MOVWF  01
0026:  CLRF   00
0028:  DECFSZ 00,F
002A:  BRA    0028
002C:  DECFSZ 01,F
002E:  BRA    0026
0030:  MOVLW  4A
0032:  MOVWF  00
0034:  DECFSZ 00,F
0036:  BRA    0034
0038:  BRA    003A
003A:  DECFSZ FEF,F
003C:  BRA    0022
003E:  RETURN 0
.................... #include "Mi_LCD.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {   
....................            int     data : 4;               // This structure is overlayed 
....................            BOOLEAN enable;                 // on to an I/O port to gain 
....................            BOOLEAN rw;                     // access to the LCD pins. 
....................            BOOLEAN rs;                     // The bits are allocated from 
....................            BOOLEAN unused;                 // low order up.  ENABLE will 
....................            } lcd;                          // be pin B0. 
....................         
....................  
....................  
.................... #if defined use_portb_lcd 
....................    /*#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x)*/ 
.................... #else 
....................    #locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {15,0,0,0,0}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0058:  MOVLW  0F
005A:  MOVWF  F95
....................       lcd.rw = 1; 
005C:  BSF    F83.5
....................       delay_cycles(1); 
005E:  NOP   
....................       lcd.enable = 1; 
0060:  BSF    F83.4
....................       delay_cycles(1); 
0062:  NOP   
....................       high = lcd.data; 
0064:  MOVF   F83,W
0066:  ANDLW  0F
0068:  MOVWF  2A
....................       lcd.enable = 0; 
006A:  BCF    F83.4
....................       delay_cycles(1); 
006C:  NOP   
....................       lcd.enable = 1; 
006E:  BSF    F83.4
....................       delay_us(1); 
0070:  NOP   
....................       low = lcd.data; 
0072:  MOVF   F83,W
0074:  ANDLW  0F
0076:  MOVWF  29
....................       lcd.enable = 0; 
0078:  BCF    F83.4
....................       set_tris_lcd(LCD_WRITE); 
007A:  MOVLW  00
007C:  MOVWF  F95
....................       return( (high<<4) | low); 
007E:  SWAPF  2A,W
0080:  MOVWF  00
0082:  MOVLW  F0
0084:  ANDWF  00,F
0086:  MOVF   00,W
0088:  IORWF  29,W
008A:  MOVWF  01
008C:  GOTO   0094 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0040:  MOVF   2A,W
0042:  ANDLW  0F
0044:  MOVWF  00
0046:  MOVLW  F0
0048:  ANDWF  F83,W
004A:  IORWF  00,W
004C:  MOVWF  F83
....................       delay_cycles(1); 
004E:  NOP   
....................       lcd.enable = 1; 
0050:  BSF    F83.4
....................       delay_us(2); 
0052:  BRA    0054
....................       lcd.enable = 0; 
0054:  BCF    F83.4
0056:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0090:  BCF    F83.6
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0092:  BRA    0058
0094:  MOVFF  01,29
0098:  BTFSC  01.7
009A:  BRA    0092
....................       lcd.rs = address; 
009C:  BTFSS  27.0
009E:  BCF    F83.6
00A0:  BTFSC  27.0
00A2:  BSF    F83.6
....................       delay_cycles(1); 
00A4:  NOP   
....................       lcd.rw = 0; 
00A6:  BCF    F83.5
....................       delay_cycles(1); 
00A8:  NOP   
....................       lcd.enable = 0; 
00AA:  BCF    F83.4
....................       lcd_send_nibble(n >> 4); 
00AC:  SWAPF  28,W
00AE:  MOVWF  29
00B0:  MOVLW  0F
00B2:  ANDWF  29,F
00B4:  MOVFF  29,2A
00B8:  RCALL  0040
....................       lcd_send_nibble(n & 0xf); 
00BA:  MOVF   28,W
00BC:  ANDLW  0F
00BE:  MOVWF  29
00C0:  MOVWF  2A
00C2:  RCALL  0040
00C4:  RETURN 0
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00C6:  MOVLW  00
00C8:  MOVWF  F95
....................     lcd.rs = 0; 
00CA:  BCF    F83.6
....................     lcd.rw = 0; 
00CC:  BCF    F83.5
....................     lcd.enable = 0; 
00CE:  BCF    F83.4
....................     delay_ms(15); 
00D0:  MOVLW  0F
00D2:  MOVWF  23
00D4:  RCALL  0018
....................     for(i=1;i<=3;++i) { 
00D6:  MOVLW  01
00D8:  MOVWF  15
00DA:  MOVF   15,W
00DC:  SUBLW  03
00DE:  BNC   00F0
....................        lcd_send_nibble(3); 
00E0:  MOVLW  03
00E2:  MOVWF  2A
00E4:  RCALL  0040
....................        delay_ms(5); 
00E6:  MOVLW  05
00E8:  MOVWF  23
00EA:  RCALL  0018
00EC:  INCF   15,F
00EE:  BRA    00DA
....................     } 
....................     lcd_send_nibble(2); 
00F0:  MOVLW  02
00F2:  MOVWF  2A
00F4:  RCALL  0040
....................     for(i=0;i<=3;++i) 
00F6:  CLRF   15
00F8:  MOVF   15,W
00FA:  SUBLW  03
00FC:  BNC   011A
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00FE:  CLRF   03
0100:  MOVF   15,W
0102:  MOVFF  FF2,16
0106:  BCF    FF2.7
0108:  RCALL  0004
010A:  BTFSC  16.7
010C:  BSF    FF2.7
010E:  MOVWF  16
0110:  CLRF   27
0112:  MOVWF  28
0114:  RCALL  0090
0116:  INCF   15,F
0118:  BRA    00F8
011A:  GOTO   0AA0 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0590:  DECFSZ 24,W
0592:  BRA    0596
0594:  BRA    059C
....................      address=lcd_line_two; 
0596:  MOVLW  40
0598:  MOVWF  25
059A:  BRA    059E
....................    else 
....................      address=0; 
059C:  CLRF   25
....................    address+=x-1; 
059E:  MOVLW  01
05A0:  SUBWF  23,W
05A2:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
05A4:  MOVF   25,W
05A6:  IORLW  80
05A8:  MOVWF  26
05AA:  CLRF   27
05AC:  MOVWF  28
05AE:  RCALL  0090
05B0:  RETURN 0
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
05DA:  MOVF   22,W
05DC:  XORLW  0C
05DE:  BZ    05EA
05E0:  XORLW  06
05E2:  BZ    05FA
05E4:  XORLW  02
05E6:  BZ    0606
05E8:  BRA    0610
....................      case '\f'   : lcd_send_byte(0,1); 
05EA:  CLRF   27
05EC:  MOVLW  01
05EE:  MOVWF  28
05F0:  RCALL  0090
....................                    delay_ms(2); 
05F2:  MOVLW  02
05F4:  MOVWF  23
05F6:  RCALL  0018
....................                                            break; 
05F8:  BRA    061A
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
05FA:  MOVLW  01
05FC:  MOVWF  23
05FE:  MOVLW  02
0600:  MOVWF  24
0602:  RCALL  0590
0604:  BRA    061A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0606:  CLRF   27
0608:  MOVLW  10
060A:  MOVWF  28
060C:  RCALL  0090
060E:  BRA    061A
....................      default     : lcd_send_byte(1,c);     break; 
0610:  MOVLW  01
0612:  MOVWF  27
0614:  MOVFF  22,28
0618:  RCALL  0090
....................    } 
061A:  RETURN 0
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... #include "Mi_Teclado.c" 
....................                      
....................  
....................  
.................... // Conexiones del teclado. 
.................... /*  
....................             RB  RB  RB  RB 
....................   Y0 --------------------+ 
....................   Y1 ----------------+   | 
....................   Y2 ------------+   |   | 
....................   Y3 --------+   |   |   |          
....................              |   |   |   | 
....................            |---|---|---|---| 
....................   RB4 ---> | 1 | 2 | 3 | A | 
....................            |---|---|---|---| 
....................   RB5 ---> | 4 | 5 | 6 | B | 
....................            |---|---|---|---| 
....................   RB6 ---> | 7 | 8 | 9 | C | 
....................            |---|---|---|---| 
....................   RB7 ---> | * | 0 | # | D | 
....................            |---|---|---|---| 
.................... */ 
....................  
.................... char kbd_getc() 
*
011E:  CLRF   15
.................... {   
....................       char tecla=0; 
....................     
....................  
....................       set_tris_b(0b11111000); // RB3-RB0 salidas,  RB7-RB4  entradas 
0120:  MOVLW  F8
0122:  MOVWF  F93
....................       output_b(0x07); 
0124:  CLRF   F93
0126:  MOVLW  07
0128:  MOVWF  F8A
....................      
....................       output_b(0); 
012A:  CLRF   F93
012C:  CLRF   F8A
....................       if (~input(PIN_B4))  
012E:  BSF    F93.4
0130:  BTFSC  F81.4
0132:  BRA    013A
....................          tecla='A'; 
0134:  MOVLW  41
0136:  MOVWF  15
0138:  BRA    015C
....................       else if (~input(PIN_B5)) 
013A:  BSF    F93.5
013C:  BTFSC  F81.5
013E:  BRA    0146
....................          tecla='B' ;                   
0140:  MOVLW  42
0142:  MOVWF  15
0144:  BRA    015C
....................       else if (~input(PIN_B6)) 
0146:  BSF    F93.6
0148:  BTFSC  F81.6
014A:  BRA    0152
....................          tecla='C'; 
014C:  MOVLW  43
014E:  MOVWF  15
0150:  BRA    015C
....................       else if (~input(PIN_B7)) 
0152:  BSF    F93.7
0154:  BTFSC  F81.7
0156:  BRA    015C
....................          tecla='D' ;  
0158:  MOVLW  44
015A:  MOVWF  15
....................           
....................       output_b(1); 
015C:  CLRF   F93
015E:  MOVLW  01
0160:  MOVWF  F8A
....................       if (~input(PIN_B4))  
0162:  BSF    F93.4
0164:  BTFSC  F81.4
0166:  BRA    016E
....................          tecla='3'; 
0168:  MOVLW  33
016A:  MOVWF  15
016C:  BRA    0190
....................       else if (~input(PIN_B5)) 
016E:  BSF    F93.5
0170:  BTFSC  F81.5
0172:  BRA    017A
....................          tecla='6'; 
0174:  MOVLW  36
0176:  MOVWF  15
0178:  BRA    0190
....................       else if(~input(PIN_B6)) 
017A:  BSF    F93.6
017C:  BTFSC  F81.6
017E:  BRA    0186
....................          tecla='9'; 
0180:  MOVLW  39
0182:  MOVWF  15
0184:  BRA    0190
....................       else if(~input(PIN_B7)) 
0186:  BSF    F93.7
0188:  BTFSC  F81.7
018A:  BRA    0190
....................          tecla='#'; 
018C:  MOVLW  23
018E:  MOVWF  15
....................  
....................       output_b(2); 
0190:  CLRF   F93
0192:  MOVLW  02
0194:  MOVWF  F8A
....................       if (~input(PIN_B4))  
0196:  BSF    F93.4
0198:  BTFSC  F81.4
019A:  BRA    01A2
....................          tecla='2'; 
019C:  MOVLW  32
019E:  MOVWF  15
01A0:  BRA    01C4
....................       else if(~input(PIN_B5)) 
01A2:  BSF    F93.5
01A4:  BTFSC  F81.5
01A6:  BRA    01AE
....................          tecla='5'; 
01A8:  MOVLW  35
01AA:  MOVWF  15
01AC:  BRA    01C4
....................       else if(~input(PIN_B6)) 
01AE:  BSF    F93.6
01B0:  BTFSC  F81.6
01B2:  BRA    01BA
....................          tecla='8'; 
01B4:  MOVLW  38
01B6:  MOVWF  15
01B8:  BRA    01C4
....................       else if(~input(PIN_B7)) 
01BA:  BSF    F93.7
01BC:  BTFSC  F81.7
01BE:  BRA    01C4
....................          tecla='0'; 
01C0:  MOVLW  30
01C2:  MOVWF  15
....................  
....................       output_b(3); 
01C4:  CLRF   F93
01C6:  MOVLW  03
01C8:  MOVWF  F8A
....................       if (~input(PIN_B4))  
01CA:  BSF    F93.4
01CC:  BTFSC  F81.4
01CE:  BRA    01D6
....................          tecla='1'; 
01D0:  MOVLW  31
01D2:  MOVWF  15
01D4:  BRA    01F8
....................       else if(~input(PIN_B5)) 
01D6:  BSF    F93.5
01D8:  BTFSC  F81.5
01DA:  BRA    01E2
....................          tecla='4'; 
01DC:  MOVLW  34
01DE:  MOVWF  15
01E0:  BRA    01F8
....................       else if(~input(PIN_B6)) 
01E2:  BSF    F93.6
01E4:  BTFSC  F81.6
01E6:  BRA    01EE
....................          tecla='7'; 
01E8:  MOVLW  37
01EA:  MOVWF  15
01EC:  BRA    01F8
....................       else if(~input(PIN_B7)) 
01EE:  BSF    F93.7
01F0:  BTFSC  F81.7
01F2:  BRA    01F8
....................          tecla='*' ;                      
01F4:  MOVLW  2A
01F6:  MOVWF  15
....................      return tecla; 
01F8:  MOVFF  15,01
01FC:  RETURN 0
.................... } 
....................  
.................... #fuses xt,nowdt,noprotect,put 
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
.................... #byte PORTB = 0xF81 
.................... #byte PORTD = 0xF83 
....................  
.................... int X=0; 
.................... int Y=0; 
.................... float A=0; 
.................... float B=0; 
.................... float C=0; 
....................  
....................  
.................... void main(void) 
*
0A68:  CLRF   FF8
0A6A:  BCF    FD0.7
0A6C:  CLRF   04
0A6E:  CLRF   05
0A70:  CLRF   09
0A72:  CLRF   08
0A74:  CLRF   07
0A76:  CLRF   06
0A78:  CLRF   0D
0A7A:  CLRF   0C
0A7C:  CLRF   0B
0A7E:  CLRF   0A
0A80:  CLRF   11
0A82:  CLRF   10
0A84:  CLRF   0F
0A86:  CLRF   0E
0A88:  MOVF   FC1,W
0A8A:  ANDLW  C0
0A8C:  IORLW  0F
0A8E:  MOVWF  FC1
0A90:  MOVLW  07
0A92:  MOVWF  FB4
.................... {   
....................    char K; 
....................    int T; 
....................     
....................    int8 LaTecla; 
....................    set_tris_b(0xf0); 
0A94:  MOVLW  F0
0A96:  MOVWF  F93
....................    set_tris_d(0x00); 
0A98:  MOVLW  00
0A9A:  MOVWF  F95
....................    lcd_init(); 
0A9C:  GOTO   00C6
....................     
....................    do 
....................    { 
....................      K=kbd_getc();  
0AA0:  CALL   011E
0AA4:  MOVFF  01,12
....................      T= K-48; 
0AA8:  MOVLW  30
0AAA:  SUBWF  12,W
0AAC:  MOVWF  13
....................       
....................      if ((K!=0)&&(K!='D')&&(K!='*')&&(K!='A')&&(K!='B')&&(K!='C')&&(K!='#')) 
0AAE:  MOVF   12,F
0AB0:  BZ    0B64
0AB2:  MOVF   12,W
0AB4:  SUBLW  44
0AB6:  BZ    0B64
0AB8:  MOVF   12,W
0ABA:  SUBLW  2A
0ABC:  BZ    0B64
0ABE:  MOVF   12,W
0AC0:  SUBLW  41
0AC2:  BZ    0B64
0AC4:  MOVF   12,W
0AC6:  SUBLW  42
0AC8:  BZ    0B64
0ACA:  MOVF   12,W
0ACC:  SUBLW  43
0ACE:  BZ    0B64
0AD0:  MOVF   12,W
0AD2:  SUBLW  23
0AD4:  BZ    0B64
....................      { 
....................          A=(A*10)+T; 
0AD6:  MOVFF  09,25
0ADA:  MOVFF  08,24
0ADE:  MOVFF  07,23
0AE2:  MOVFF  06,22
0AE6:  CLRF   29
0AE8:  CLRF   28
0AEA:  MOVLW  20
0AEC:  MOVWF  27
0AEE:  MOVLW  82
0AF0:  MOVWF  26
0AF2:  CALL   01FE
0AF6:  MOVFF  03,18
0AFA:  MOVFF  02,17
0AFE:  MOVFF  01,16
0B02:  MOVFF  00,15
0B06:  CLRF   1A
0B08:  MOVFF  13,19
0B0C:  CALL   02F0
0B10:  BCF    FD8.1
0B12:  MOVFF  18,1C
0B16:  MOVFF  17,1B
0B1A:  MOVFF  16,1A
0B1E:  MOVFF  15,19
0B22:  MOVFF  03,20
0B26:  MOVFF  02,1F
0B2A:  MOVFF  01,1E
0B2E:  MOVFF  00,1D
0B32:  CALL   0326
0B36:  MOVFF  03,09
0B3A:  MOVFF  02,08
0B3E:  MOVFF  01,07
0B42:  MOVFF  00,06
....................          X++; 
0B46:  INCF   04,F
....................          lcd_gotoxy(X,1); 
0B48:  MOVFF  04,23
0B4C:  MOVLW  01
0B4E:  MOVWF  24
0B50:  RCALL  0590
....................          printf(lcd_putc,"%d",T); 
0B52:  MOVFF  13,15
0B56:  MOVLW  18
0B58:  MOVWF  16
0B5A:  RCALL  061C
....................          delay_ms(100); 
0B5C:  MOVLW  64
0B5E:  MOVWF  23
0B60:  CALL   0018
....................      } 
....................       
....................      if(K=='*') 
0B64:  MOVF   12,W
0B66:  SUBLW  2A
0B68:  BNZ   0B8A
....................      { 
....................          X=0; 
0B6A:  CLRF   04
....................          A=0; 
0B6C:  CLRF   09
0B6E:  CLRF   08
0B70:  CLRF   07
0B72:  CLRF   06
....................          B=0; 
0B74:  CLRF   0D
0B76:  CLRF   0C
0B78:  CLRF   0B
0B7A:  CLRF   0A
....................          C=0; 
0B7C:  CLRF   11
0B7E:  CLRF   10
0B80:  CLRF   0F
0B82:  CLRF   0E
....................          printf(lcd_putc,"\f"); 
0B84:  MOVLW  0C
0B86:  MOVWF  22
0B88:  RCALL  05DA
....................      } 
.................... //////////////////////SUMA///////////////////////////// 
....................  
....................      if(K=='D') 
0B8A:  MOVF   12,W
0B8C:  SUBLW  44
0B8E:  BTFSS  FD8.2
0B90:  BRA    0CF8
....................      { 
....................          X++; 
0B92:  INCF   04,F
....................          Y=1; 
0B94:  MOVLW  01
0B96:  MOVWF  05
....................          printf(lcd_putc,"+");  
0B98:  MOVLW  2B
0B9A:  MOVWF  22
0B9C:  RCALL  05DA
....................         do 
....................         { 
....................             K=kbd_getc(); 
0B9E:  CALL   011E
0BA2:  MOVFF  01,12
....................             T=K-48; 
0BA6:  MOVLW  30
0BA8:  SUBWF  12,W
0BAA:  MOVWF  13
....................             
....................       if ((K!=0)&&(K!='D')&&(K!='*')&&(K!='A')&&(K!='B')&&(K!='C')&&(K!='#')) 
0BAC:  MOVF   12,F
0BAE:  BZ    0C62
0BB0:  MOVF   12,W
0BB2:  SUBLW  44
0BB4:  BZ    0C62
0BB6:  MOVF   12,W
0BB8:  SUBLW  2A
0BBA:  BZ    0C62
0BBC:  MOVF   12,W
0BBE:  SUBLW  41
0BC0:  BZ    0C62
0BC2:  MOVF   12,W
0BC4:  SUBLW  42
0BC6:  BZ    0C62
0BC8:  MOVF   12,W
0BCA:  SUBLW  43
0BCC:  BZ    0C62
0BCE:  MOVF   12,W
0BD0:  SUBLW  23
0BD2:  BZ    0C62
....................       { 
....................          B=(B*10)+T; 
0BD4:  MOVFF  0D,25
0BD8:  MOVFF  0C,24
0BDC:  MOVFF  0B,23
0BE0:  MOVFF  0A,22
0BE4:  CLRF   29
0BE6:  CLRF   28
0BE8:  MOVLW  20
0BEA:  MOVWF  27
0BEC:  MOVLW  82
0BEE:  MOVWF  26
0BF0:  CALL   01FE
0BF4:  MOVFF  03,18
0BF8:  MOVFF  02,17
0BFC:  MOVFF  01,16
0C00:  MOVFF  00,15
0C04:  CLRF   1A
0C06:  MOVFF  13,19
0C0A:  CALL   02F0
0C0E:  BCF    FD8.1
0C10:  MOVFF  18,1C
0C14:  MOVFF  17,1B
0C18:  MOVFF  16,1A
0C1C:  MOVFF  15,19
0C20:  MOVFF  03,20
0C24:  MOVFF  02,1F
0C28:  MOVFF  01,1E
0C2C:  MOVFF  00,1D
0C30:  CALL   0326
0C34:  MOVFF  03,0D
0C38:  MOVFF  02,0C
0C3C:  MOVFF  01,0B
0C40:  MOVFF  00,0A
....................          X++; 
0C44:  INCF   04,F
....................          lcd_gotoxy(X,1); 
0C46:  MOVFF  04,23
0C4A:  MOVLW  01
0C4C:  MOVWF  24
0C4E:  RCALL  0590
....................          printf(lcd_putc,"%d",T); 
0C50:  MOVFF  13,15
0C54:  MOVLW  18
0C56:  MOVWF  16
0C58:  RCALL  061C
....................          delay_ms(100); 
0C5A:  MOVLW  64
0C5C:  MOVWF  23
0C5E:  CALL   0018
....................       } 
....................        
....................       if(K=='#') 
0C62:  MOVF   12,W
0C64:  SUBLW  23
0C66:  BNZ   0CCA
....................       { 
....................          C=A+B; 
0C68:  BCF    FD8.1
0C6A:  MOVFF  09,1C
0C6E:  MOVFF  08,1B
0C72:  MOVFF  07,1A
0C76:  MOVFF  06,19
0C7A:  MOVFF  0D,20
0C7E:  MOVFF  0C,1F
0C82:  MOVFF  0B,1E
0C86:  MOVFF  0A,1D
0C8A:  CALL   0326
0C8E:  MOVFF  03,11
0C92:  MOVFF  02,10
0C96:  MOVFF  01,0F
0C9A:  MOVFF  00,0E
....................          lcd_gotoxy(1,2); 
0C9E:  MOVLW  01
0CA0:  MOVWF  23
0CA2:  MOVLW  02
0CA4:  MOVWF  24
0CA6:  RCALL  0590
....................          printf(lcd_putc,"%f",C); 
0CA8:  MOVLW  89
0CAA:  MOVWF  FE9
0CAC:  MOVFF  11,18
0CB0:  MOVFF  10,17
0CB4:  MOVFF  0F,16
0CB8:  MOVFF  0E,15
0CBC:  MOVLW  02
0CBE:  MOVWF  19
0CC0:  RCALL  0794
....................          delay_ms(100); 
0CC2:  MOVLW  64
0CC4:  MOVWF  23
0CC6:  CALL   0018
....................       } 
....................        
....................       if(K=='*') 
0CCA:  MOVF   12,W
0CCC:  SUBLW  2A
0CCE:  BNZ   0CF2
....................      { 
....................          Y=0; 
0CD0:  CLRF   05
....................          X=0; 
0CD2:  CLRF   04
....................          A=0; 
0CD4:  CLRF   09
0CD6:  CLRF   08
0CD8:  CLRF   07
0CDA:  CLRF   06
....................          B=0; 
0CDC:  CLRF   0D
0CDE:  CLRF   0C
0CE0:  CLRF   0B
0CE2:  CLRF   0A
....................          C=0; 
0CE4:  CLRF   11
0CE6:  CLRF   10
0CE8:  CLRF   0F
0CEA:  CLRF   0E
....................          printf(lcd_putc,"\f"); 
0CEC:  MOVLW  0C
0CEE:  MOVWF  22
0CF0:  RCALL  05DA
....................      } 
....................       
....................       } While(Y==1); 
0CF2:  DECFSZ 05,W
0CF4:  BRA    0CF8
0CF6:  BRA    0B9E
....................          
....................      } 
....................       
....................       
.................... /////////////////////Resta/////////////////////////////////////////// 
....................  
.................... if(K=='C') 
0CF8:  MOVF   12,W
0CFA:  SUBLW  43
0CFC:  BTFSS  FD8.2
0CFE:  BRA    0E6C
....................      { 
....................          X++; 
0D00:  INCF   04,F
....................          Y=1; 
0D02:  MOVLW  01
0D04:  MOVWF  05
....................          printf(lcd_putc,"-");  
0D06:  MOVLW  2D
0D08:  MOVWF  22
0D0A:  RCALL  05DA
....................         do 
....................         { 
....................             K=kbd_getc(); 
0D0C:  CALL   011E
0D10:  MOVFF  01,12
....................             T=K-48; 
0D14:  MOVLW  30
0D16:  SUBWF  12,W
0D18:  MOVWF  13
....................             
....................       if ((K!=0)&&(K!='D')&&(K!='*')&&(K!='A')&&(K!='B')&&(K!='C')&&(K!='#')) 
0D1A:  MOVF   12,F
0D1C:  BZ    0DD2
0D1E:  MOVF   12,W
0D20:  SUBLW  44
0D22:  BZ    0DD2
0D24:  MOVF   12,W
0D26:  SUBLW  2A
0D28:  BZ    0DD2
0D2A:  MOVF   12,W
0D2C:  SUBLW  41
0D2E:  BZ    0DD2
0D30:  MOVF   12,W
0D32:  SUBLW  42
0D34:  BZ    0DD2
0D36:  MOVF   12,W
0D38:  SUBLW  43
0D3A:  BZ    0DD2
0D3C:  MOVF   12,W
0D3E:  SUBLW  23
0D40:  BZ    0DD2
....................       { 
....................          B=(B*10)+T; 
0D42:  MOVFF  0D,25
0D46:  MOVFF  0C,24
0D4A:  MOVFF  0B,23
0D4E:  MOVFF  0A,22
0D52:  CLRF   29
0D54:  CLRF   28
0D56:  MOVLW  20
0D58:  MOVWF  27
0D5A:  MOVLW  82
0D5C:  MOVWF  26
0D5E:  CALL   01FE
0D62:  MOVFF  03,18
0D66:  MOVFF  02,17
0D6A:  MOVFF  01,16
0D6E:  MOVFF  00,15
0D72:  CLRF   1A
0D74:  MOVFF  13,19
0D78:  CALL   02F0
0D7C:  BCF    FD8.1
0D7E:  MOVFF  18,1C
0D82:  MOVFF  17,1B
0D86:  MOVFF  16,1A
0D8A:  MOVFF  15,19
0D8E:  MOVFF  03,20
0D92:  MOVFF  02,1F
0D96:  MOVFF  01,1E
0D9A:  MOVFF  00,1D
0D9E:  CALL   0326
0DA2:  MOVFF  03,0D
0DA6:  MOVFF  02,0C
0DAA:  MOVFF  01,0B
0DAE:  MOVFF  00,0A
....................          X++; 
0DB2:  INCF   04,F
....................          lcd_gotoxy(X,1); 
0DB4:  MOVFF  04,23
0DB8:  MOVLW  01
0DBA:  MOVWF  24
0DBC:  CALL   0590
....................          printf(lcd_putc,"%d",T); 
0DC0:  MOVFF  13,15
0DC4:  MOVLW  18
0DC6:  MOVWF  16
0DC8:  RCALL  061C
....................          delay_ms(100); 
0DCA:  MOVLW  64
0DCC:  MOVWF  23
0DCE:  CALL   0018
....................       } 
....................        
....................       if(K=='#') 
0DD2:  MOVF   12,W
0DD4:  SUBLW  23
0DD6:  BNZ   0E3C
....................       { 
....................          C=A-B; 
0DD8:  BSF    FD8.1
0DDA:  MOVFF  09,1C
0DDE:  MOVFF  08,1B
0DE2:  MOVFF  07,1A
0DE6:  MOVFF  06,19
0DEA:  MOVFF  0D,20
0DEE:  MOVFF  0C,1F
0DF2:  MOVFF  0B,1E
0DF6:  MOVFF  0A,1D
0DFA:  CALL   0326
0DFE:  MOVFF  03,11
0E02:  MOVFF  02,10
0E06:  MOVFF  01,0F
0E0A:  MOVFF  00,0E
....................          lcd_gotoxy(1,2); 
0E0E:  MOVLW  01
0E10:  MOVWF  23
0E12:  MOVLW  02
0E14:  MOVWF  24
0E16:  CALL   0590
....................          printf(lcd_putc,"%f",C); 
0E1A:  MOVLW  89
0E1C:  MOVWF  FE9
0E1E:  MOVFF  11,18
0E22:  MOVFF  10,17
0E26:  MOVFF  0F,16
0E2A:  MOVFF  0E,15
0E2E:  MOVLW  02
0E30:  MOVWF  19
0E32:  RCALL  0794
....................          delay_ms(100); 
0E34:  MOVLW  64
0E36:  MOVWF  23
0E38:  CALL   0018
....................       } 
....................        
....................       if(K=='*') 
0E3C:  MOVF   12,W
0E3E:  SUBLW  2A
0E40:  BNZ   0E66
....................      { 
....................          Y=0; 
0E42:  CLRF   05
....................          X=0; 
0E44:  CLRF   04
....................          A=0; 
0E46:  CLRF   09
0E48:  CLRF   08
0E4A:  CLRF   07
0E4C:  CLRF   06
....................          B=0; 
0E4E:  CLRF   0D
0E50:  CLRF   0C
0E52:  CLRF   0B
0E54:  CLRF   0A
....................          C=0; 
0E56:  CLRF   11
0E58:  CLRF   10
0E5A:  CLRF   0F
0E5C:  CLRF   0E
....................          printf(lcd_putc,"\f"); 
0E5E:  MOVLW  0C
0E60:  MOVWF  22
0E62:  CALL   05DA
....................      } 
....................       
....................       } While(Y==1); 
0E66:  DECFSZ 05,W
0E68:  BRA    0E6C
0E6A:  BRA    0D0C
....................          
....................      } 
....................       
....................       
.................... //////////////////multiplicacion/////////////////////////////      
....................       
....................       
....................      if(K=='B') 
0E6C:  MOVF   12,W
0E6E:  SUBLW  42
0E70:  BTFSS  FD8.2
0E72:  BRA    0FE4
....................      { 
....................          X++; 
0E74:  INCF   04,F
....................          Y=1; 
0E76:  MOVLW  01
0E78:  MOVWF  05
....................          printf(lcd_putc,"x");  
0E7A:  MOVLW  78
0E7C:  MOVWF  22
0E7E:  CALL   05DA
....................         do 
....................         { 
....................             K=kbd_getc(); 
0E82:  CALL   011E
0E86:  MOVFF  01,12
....................             T=K-48; 
0E8A:  MOVLW  30
0E8C:  SUBWF  12,W
0E8E:  MOVWF  13
....................             
....................       if ((K!=0)&&(K!='D')&&(K!='*')&&(K!='A')&&(K!='B')&&(K!='C')&&(K!='#')) 
0E90:  MOVF   12,F
0E92:  BZ    0F4A
0E94:  MOVF   12,W
0E96:  SUBLW  44
0E98:  BZ    0F4A
0E9A:  MOVF   12,W
0E9C:  SUBLW  2A
0E9E:  BZ    0F4A
0EA0:  MOVF   12,W
0EA2:  SUBLW  41
0EA4:  BZ    0F4A
0EA6:  MOVF   12,W
0EA8:  SUBLW  42
0EAA:  BZ    0F4A
0EAC:  MOVF   12,W
0EAE:  SUBLW  43
0EB0:  BZ    0F4A
0EB2:  MOVF   12,W
0EB4:  SUBLW  23
0EB6:  BZ    0F4A
....................       { 
....................          B=(B*10)+T; 
0EB8:  MOVFF  0D,25
0EBC:  MOVFF  0C,24
0EC0:  MOVFF  0B,23
0EC4:  MOVFF  0A,22
0EC8:  CLRF   29
0ECA:  CLRF   28
0ECC:  MOVLW  20
0ECE:  MOVWF  27
0ED0:  MOVLW  82
0ED2:  MOVWF  26
0ED4:  CALL   01FE
0ED8:  MOVFF  03,18
0EDC:  MOVFF  02,17
0EE0:  MOVFF  01,16
0EE4:  MOVFF  00,15
0EE8:  CLRF   1A
0EEA:  MOVFF  13,19
0EEE:  CALL   02F0
0EF2:  BCF    FD8.1
0EF4:  MOVFF  18,1C
0EF8:  MOVFF  17,1B
0EFC:  MOVFF  16,1A
0F00:  MOVFF  15,19
0F04:  MOVFF  03,20
0F08:  MOVFF  02,1F
0F0C:  MOVFF  01,1E
0F10:  MOVFF  00,1D
0F14:  CALL   0326
0F18:  MOVFF  03,0D
0F1C:  MOVFF  02,0C
0F20:  MOVFF  01,0B
0F24:  MOVFF  00,0A
....................          X++; 
0F28:  INCF   04,F
....................          lcd_gotoxy(X,1); 
0F2A:  MOVFF  04,23
0F2E:  MOVLW  01
0F30:  MOVWF  24
0F32:  CALL   0590
....................          printf(lcd_putc,"%d",T); 
0F36:  MOVFF  13,15
0F3A:  MOVLW  18
0F3C:  MOVWF  16
0F3E:  CALL   061C
....................          delay_ms(100); 
0F42:  MOVLW  64
0F44:  MOVWF  23
0F46:  CALL   0018
....................       } 
....................        
....................       if(K=='#') 
0F4A:  MOVF   12,W
0F4C:  SUBLW  23
0F4E:  BNZ   0FB4
....................       { 
....................          C=A*B; 
0F50:  MOVFF  09,25
0F54:  MOVFF  08,24
0F58:  MOVFF  07,23
0F5C:  MOVFF  06,22
0F60:  MOVFF  0D,29
0F64:  MOVFF  0C,28
0F68:  MOVFF  0B,27
0F6C:  MOVFF  0A,26
0F70:  CALL   01FE
0F74:  MOVFF  03,11
0F78:  MOVFF  02,10
0F7C:  MOVFF  01,0F
0F80:  MOVFF  00,0E
....................          lcd_gotoxy(1,2); 
0F84:  MOVLW  01
0F86:  MOVWF  23
0F88:  MOVLW  02
0F8A:  MOVWF  24
0F8C:  CALL   0590
....................          printf(lcd_putc,"%f",C); 
0F90:  MOVLW  89
0F92:  MOVWF  FE9
0F94:  MOVFF  11,18
0F98:  MOVFF  10,17
0F9C:  MOVFF  0F,16
0FA0:  MOVFF  0E,15
0FA4:  MOVLW  02
0FA6:  MOVWF  19
0FA8:  CALL   0794
....................          delay_ms(100); 
0FAC:  MOVLW  64
0FAE:  MOVWF  23
0FB0:  CALL   0018
....................       } 
....................        
....................       if(K=='*') 
0FB4:  MOVF   12,W
0FB6:  SUBLW  2A
0FB8:  BNZ   0FDE
....................      { 
....................          Y=0; 
0FBA:  CLRF   05
....................          X=0; 
0FBC:  CLRF   04
....................          A=0; 
0FBE:  CLRF   09
0FC0:  CLRF   08
0FC2:  CLRF   07
0FC4:  CLRF   06
....................          B=0; 
0FC6:  CLRF   0D
0FC8:  CLRF   0C
0FCA:  CLRF   0B
0FCC:  CLRF   0A
....................          C=0; 
0FCE:  CLRF   11
0FD0:  CLRF   10
0FD2:  CLRF   0F
0FD4:  CLRF   0E
....................          printf(lcd_putc,"\f"); 
0FD6:  MOVLW  0C
0FD8:  MOVWF  22
0FDA:  CALL   05DA
....................      } 
....................       
....................       } While(Y==1); 
0FDE:  DECFSZ 05,W
0FE0:  BRA    0FE4
0FE2:  BRA    0E82
....................          
....................      } 
.................... //////////////////Division//////////////////////// 
....................  
.................... if(K=='A') 
0FE4:  MOVF   12,W
0FE6:  SUBLW  41
0FE8:  BTFSS  FD8.2
0FEA:  BRA    115A
....................      { 
....................          X++; 
0FEC:  INCF   04,F
....................          Y=1; 
0FEE:  MOVLW  01
0FF0:  MOVWF  05
....................          printf(lcd_putc,"/");  
0FF2:  MOVLW  2F
0FF4:  MOVWF  22
0FF6:  CALL   05DA
....................         do 
....................         { 
....................             K=kbd_getc(); 
0FFA:  CALL   011E
0FFE:  MOVFF  01,12
....................             T=K-48; 
1002:  MOVLW  30
1004:  SUBWF  12,W
1006:  MOVWF  13
....................             
....................       if ((K!=0)&&(K!='D')&&(K!='*')&&(K!='A')&&(K!='B')&&(K!='C')&&(K!='#')) 
1008:  MOVF   12,F
100A:  BZ    10C2
100C:  MOVF   12,W
100E:  SUBLW  44
1010:  BZ    10C2
1012:  MOVF   12,W
1014:  SUBLW  2A
1016:  BZ    10C2
1018:  MOVF   12,W
101A:  SUBLW  41
101C:  BZ    10C2
101E:  MOVF   12,W
1020:  SUBLW  42
1022:  BZ    10C2
1024:  MOVF   12,W
1026:  SUBLW  43
1028:  BZ    10C2
102A:  MOVF   12,W
102C:  SUBLW  23
102E:  BZ    10C2
....................       { 
....................          B=(B*10)+T; 
1030:  MOVFF  0D,25
1034:  MOVFF  0C,24
1038:  MOVFF  0B,23
103C:  MOVFF  0A,22
1040:  CLRF   29
1042:  CLRF   28
1044:  MOVLW  20
1046:  MOVWF  27
1048:  MOVLW  82
104A:  MOVWF  26
104C:  CALL   01FE
1050:  MOVFF  03,18
1054:  MOVFF  02,17
1058:  MOVFF  01,16
105C:  MOVFF  00,15
1060:  CLRF   1A
1062:  MOVFF  13,19
1066:  CALL   02F0
106A:  BCF    FD8.1
106C:  MOVFF  18,1C
1070:  MOVFF  17,1B
1074:  MOVFF  16,1A
1078:  MOVFF  15,19
107C:  MOVFF  03,20
1080:  MOVFF  02,1F
1084:  MOVFF  01,1E
1088:  MOVFF  00,1D
108C:  CALL   0326
1090:  MOVFF  03,0D
1094:  MOVFF  02,0C
1098:  MOVFF  01,0B
109C:  MOVFF  00,0A
....................          X++; 
10A0:  INCF   04,F
....................          lcd_gotoxy(X,1); 
10A2:  MOVFF  04,23
10A6:  MOVLW  01
10A8:  MOVWF  24
10AA:  CALL   0590
....................          printf(lcd_putc,"%d",T); 
10AE:  MOVFF  13,15
10B2:  MOVLW  18
10B4:  MOVWF  16
10B6:  CALL   061C
....................          delay_ms(100); 
10BA:  MOVLW  64
10BC:  MOVWF  23
10BE:  CALL   0018
....................       } 
....................        
....................       if(K=='#') 
10C2:  MOVF   12,W
10C4:  SUBLW  23
10C6:  BNZ   112A
....................       { 
....................          C=A/B; 
10C8:  MOVFF  09,18
10CC:  MOVFF  08,17
10D0:  MOVFF  07,16
10D4:  MOVFF  06,15
10D8:  MOVFF  0D,1C
10DC:  MOVFF  0C,1B
10E0:  MOVFF  0B,1A
10E4:  MOVFF  0A,19
10E8:  BRA    090C
10EA:  MOVFF  03,11
10EE:  MOVFF  02,10
10F2:  MOVFF  01,0F
10F6:  MOVFF  00,0E
....................          lcd_gotoxy(1,2); 
10FA:  MOVLW  01
10FC:  MOVWF  23
10FE:  MOVLW  02
1100:  MOVWF  24
1102:  CALL   0590
....................          printf(lcd_putc,"%.3f",C); 
1106:  MOVLW  89
1108:  MOVWF  FE9
110A:  MOVFF  11,18
110E:  MOVFF  10,17
1112:  MOVFF  0F,16
1116:  MOVFF  0E,15
111A:  MOVLW  03
111C:  MOVWF  19
111E:  CALL   0794
....................          delay_ms(100); 
1122:  MOVLW  64
1124:  MOVWF  23
1126:  CALL   0018
....................       } 
....................        
....................       if(K=='*') 
112A:  MOVF   12,W
112C:  SUBLW  2A
112E:  BNZ   1154
....................      { 
....................          Y=0; 
1130:  CLRF   05
....................          X=0; 
1132:  CLRF   04
....................          A=0; 
1134:  CLRF   09
1136:  CLRF   08
1138:  CLRF   07
113A:  CLRF   06
....................          B=0; 
113C:  CLRF   0D
113E:  CLRF   0C
1140:  CLRF   0B
1142:  CLRF   0A
....................          C=0; 
1144:  CLRF   11
1146:  CLRF   10
1148:  CLRF   0F
114A:  CLRF   0E
....................          printf(lcd_putc,"\f"); 
114C:  MOVLW  0C
114E:  MOVWF  22
1150:  CALL   05DA
....................      } 
....................       
....................       } While(Y==1); 
1154:  DECFSZ 05,W
1156:  BRA    115A
1158:  BRA    0FFA
....................          
....................      } 
....................  
....................    } while(TRUE); 
115A:  BRA    0AA0
....................  } 
....................  
115C:  SLEEP 

Configuration Fuses:
   Word  1: C03F   PLL12 CPUDIV4 USBDIV XT FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
